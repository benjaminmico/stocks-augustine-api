schema {
  query: Query
  mutation: Mutation
}

type Query {
  getProducts(
    filter: FilterInput
    sort: SortInput
    limit: Int
    nextToken: String
  ): [Product] @aws_api_key @aws_cognito_user_pools
  getRestaurants(
    filter: FilterInput
    sort: SortInput
    limit: Int
    nextToken: String
  ): [Restaurant] @aws_api_key @aws_cognito_user_pools
  getSuppliers(
    filter: FilterInput
    sort: SortInput
    limit: Int
    nextToken: String
  ): [Supplier] @aws_api_key @aws_cognito_user_pools
  getStocks(
    filter: FilterInput
    sort: SortInput
    limit: Int
    nextToken: String
  ): [Stock] @aws_api_key @aws_cognito_user_pools
  getOrders(
    filter: FilterInput
    sort: SortInput
    limit: Int
    nextToken: String
  ): [Order] @aws_api_key @aws_cognito_user_pools
  getCategories(
    filter: FilterInput
    sort: SortInput
    limit: Int
    nextToken: String
  ): [Category] @aws_api_key @aws_cognito_user_pools
  getSubcategories(
    filter: FilterInput
    sort: SortInput
    limit: Int
    nextToken: String
  ): [Subcategory] @aws_api_key @aws_cognito_user_pools
  getMenuItems(
    filter: FilterInput
    sort: SortInput
    limit: Int
    nextToken: String
  ): [MenuItem] @aws_api_key @aws_cognito_user_pools
  getMenuItem(menuItemId: ID): MenuItem @aws_api_key @aws_cognito_user_pools
  getSales(
    filter: FilterInput
    sort: SortInput
    limit: Int
    nextToken: String
  ): [Sale] @aws_api_key @aws_cognito_user_pools
  getSalesAnalysis(
    filter: FilterInput
    sort: SortInput
    limit: Int
    nextToken: String
  ): [SalesAnalysis] @aws_api_key @aws_cognito_user_pools
  getUploadUrl(userId: String): AWSJSON! @aws_api_key @aws_cognito_user_pools
}

type Mutation {
  createProduct(product: ProductInput!): Product
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  createRestaurant(restaurant: RestaurantInput!): Restaurant
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  createMenuItem(menuItem: MenuItemInput!): MenuItem
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  createSupplier(supplier: SupplierInput!): Supplier
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  updateProduct(product: UpdateProductInput!): Product
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  updateRestaurant(restaurant: UpdateRestaurantInput!): Restaurant
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  updateSupplier(supplier: UpdateSupplierInput!): Supplier
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  deleteProduct(productId: ID!): ID
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  deleteRestaurant(restaurantId: ID!): ID
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  deleteSupplier(supplierId: ID!): ID
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  deleteMenuItem(menuItemId: ID!): ID
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  addRecipeItem(menuItemId: ID!, recipeItem: RecipeItemInput): ID
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  deleteRecipeItem(recipeItemId: ID!): ID
    @aws_cognito_user_pools(cognito_groups: ["Admin"])
  scanInvoice(file: String!): File!
}

input FilterInput {
  attributeName: String!
  attributeValue: String!
}

input SortInput {
  attributeName: String!
  direction: SortDirection!
}

enum SortDirection {
  ASC
  DESC
}

input ProductInput {
  name: String!
  unit: Float!
  saleFormat: SaleFormat!
  price: Float!
  unitOfMeasure: UnitOfMeasure!
  restaurantId: ID!
  supplierId: ID
}

input RestaurantInput {
  name: String!
}

input MenuItemInput {
  name: String!
  type: MenuItemType!
}

input RecipeItemInput {
  name: String!
  usedQuantity: Float
  unitOfMeasure: UnitOfMeasure
  product: Product
  category: Category
  subcategory: Subcategory
}

input SupplierInput {
  name: String!
}

input UpdateProductInput {
  productId: ID!
  name: String
  unit: Float
  saleFormat: SaleFormat
  price: Float
  unitOfMeasure: UnitOfMeasure
  supplierId: ID
}

input UpdateSupplierInput {
  supplierId: ID!
  name: String
}

input UpdateRestaurantInput {
  restaurantId: ID!
  name: String
}

type Product @aws_api_key @aws_cognito_user_pools {
  productId: ID!
  name: String!
  packageWeight: Float
  saleFormat: SaleFormat
  price: Float
  supplierId: ID!
  restaurantId: ID!
  unitOfMeasure: UnitOfMeasure
  supplier: Supplier
}

type Restaurant @aws_api_key @aws_cognito_user_pools {
  restaurantId: ID!
  name: String!
}

type Supplier @aws_api_key @aws_cognito_user_pools {
  supplierId: ID!
  name: String!
}

type Stock @aws_api_key @aws_cognito_user_pools {
  stockId: ID!
  productId: ID!
  availableQuantity: Int
  alertThreshold: Int
  lastUpdateDate: String
  product: Product
  restaurantId: ID!
}

type Order @aws_api_key @aws_cognito_user_pools {
  orderId: ID!
  productId: ID!
  orderedQuantity: Int
  orderDate: String
  deliveryDate: String
  product: Product
}

type Category @aws_api_key @aws_cognito_user_pools {
  categoryId: ID!
  restaurantId: ID!
  name: String!
}

type Subcategory @aws_api_key @aws_cognito_user_pools {
  subcategoryId: ID!
  restaurantId: ID!
  name: String!
  categoryId: ID!
  category: Category
}

enum MenuItemType @aws_api_key @aws_cognito_user_pools {
  APPETIZER
  MAIN
  DESSERT
}

type MenuItem @aws_api_key @aws_cognito_user_pools {
  menuItemId: ID!
  restaurantId: ID!
  name: String!
  recipe: [RecipeItem]!
  type: MenuItemType!
}

type RecipeItem @aws_api_key @aws_cognito_user_pools {
  recipeItemId: ID!
  menuItemId: ID!
  restaurantId: ID!
  name: String!
  usedQuantity: Float
  unitOfMeasure: UnitOfMeasure
  product: Product
  category: Category
  subcategory: Subcategory
}

type Sale @aws_api_key @aws_cognito_user_pools {
  saleId: ID!
  menuId: ID!
  restaurantId: ID!
  quantitySold: Int
  saleDate: String
}

type SalesAnalysis @aws_api_key @aws_cognito_user_pools {
  analysisId: ID!
  saleId: ID!
  restaurantId: ID!
  margin: Float
  lossPercentage: Float
  salePrice: Float
  saleTrend: String
  sale: Sale
}

enum UnitOfMeasure {
  Unit
  Liter
  Kilogram
}

enum SaleFormat {
  Individual
  Package
}

enum MenuItemType {
  Appetizer
  Main
  Dessert
}

type File {
  url: String!
}
